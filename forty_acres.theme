<?php

/**
 * @file
 * The primary PHP file for the Forty Acres theme.
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_page().
 */
function forty_acres_preprocess_page(&$variables) {
  // UT logo in brandbar.
  $theme_handler = \Drupal::service('theme_handler');
  $theme_path = $theme_handler->getTheme('forty_acres')->getPath();
  $variables['brandbar_shield'] = '/' . $theme_path . '/images/utexas-brandbar-shield.svg';
  // Parent entity link and title.
  $variables['parent_entity_title'] = theme_get_setting('parent_link_title');
  $variables['parent_entity_link'] = theme_get_setting('parent_link');
  // Add css if user selects a logo option in theme settings.
  $variables['logo_height'] = theme_get_setting('logo_height');
}

/**
 * Implements hook_preprocess_block().
 */
function forty_acres_preprocess_block(&$variables) {
  $base_plugin_id = $variables['base_plugin_id'];
  $content = $variables['elements']['content'] ?? [];

  // Add logo alt text.
  if ($base_plugin_id === 'system_branding_block') {
    $config = \Drupal::config('system.site');
    $variables['logo_alt_text'] = $config->get('name');
  }

  if (isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['data-block'] = $variables['attributes']['id'];
  }

  // Add a bundle identifier as a CSS class.
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('block-bundle-' . $content['#block_content']->bundle());
  }

}

/**
 * Implements hook_preprocess_region().
 */
function forty_acres_preprocess_region(&$variables) {
  if ($variables['region'] === 'header_secondary') {
    // Add class when theme setting has been set to "side-by-side".
    if (theme_get_setting('header_secondary_display') === 'side_by_side') {
      $variables['attributes']['class'][] = 'flex-lg-row';
    }
  }
  if ($variables['region'] === 'primary_menu') {
    // Add class when main menu alignment setting is checked.
    $alignment = theme_get_setting('main_menu_alignment');
    if ($alignment === 'left_alignment') {
      $variables['attributes']['class'][] = 'main-menu-flex-start';
    }
    elseif ($alignment === 'right_alignment') {
      $variables['attributes']['class'][] = 'main-menu-flex-end';
    }
  }
}

/**
 * Implements template_preprocess_menu().
 */
function forty_acres_preprocess_menu(&$variables) {
  // Call this potentially self-invoking process function separately.
  _forty_acres_preprocess_menu_items_create_attribute($variables['items']);

  if ($variables['menu_name'] != 'main') {
    return;
  }

  // Call this potentially self-invoking process function separately.
  _forty_acres_preprocess_menu_items_nolink($variables['items']);
}

/**
 * Helper function to recursively create menu item link attributes object.
 */
function _forty_acres_preprocess_menu_items_create_attribute(&$items) {
  // Items are referred to using index throughout foreach to help recursively
  // pass their data by reference.
  foreach ($items as $delta => $unused) {
    // Create new attributes object for use in the template.
    $items[$delta]['link_attributes'] = new Attribute();

    // When the menu item has children, recursively call this function.
    if (!empty($items[$delta]['below'])) {
      _forty_acres_preprocess_menu_items_create_attribute($items[$delta]['below']);
    }
  }
}

/**
 * Helper function to recursively set menu item link attributes.
 */
function _forty_acres_preprocess_menu_items_nolink(&$items) {
  // Items are referred to using index throughout foreach to help recursively
  // pass their data by reference.
  foreach ($items as $delta => $unused) {
    /** @var \Drupal\Core\Template\Attribute $link_attributes */
    $link_attributes = $items[$delta]['link_attributes'];
    /** @var \Drupal\Core\Url $itemUrl */
    $item_url = $items[$delta]['url'];

    // If the url is routed (not external), check for <nolink> and <none> so
    // that a tabindex can be applied for accessiblity.
    if ($item_url->isRouted() && $menuEntityRouteName = $item_url->getRouteName()) {
      if ($menuEntityRouteName == '<nolink>' || $menuEntityRouteName == '<none>') {
        $link_attributes->setAttribute('tabindex', 0);
      }
    }

    // Reassign link attributes after processing.
    $items[$delta]['link_attributes'] = $link_attributes;

    // When the menu item has children, recursively call this function.
    if (!empty($items[$delta]['below'])) {
      _forty_acres_preprocess_menu_items_nolink($items[$delta]['below']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function forty_acres_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  $base_plugin_id = $variables['elements']['#base_plugin_id'];
  if (isset($base_plugin_id) && $base_plugin_id === 'system_menu_block') {
    if (isset($variables['elements']['#id'])) {
      $hook = $variables['elements']['#id'];
      $block = Block::load($hook);
      $region = $block->getRegion();
      $suggestions[] = 'block__system_menu_block__' . $region;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function forty_acres_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#value']) && isset($variables['element']['#type'])) {
    if ($variables['element']['#value'] instanceof TranslatableMarkup) {
      if ($variables['element']['#type'] == 'submit' && $variables['element']['#value']->render() == 'Search') {
        $suggestions[] = 'input__submit__search';
      }
    }
  }
}
